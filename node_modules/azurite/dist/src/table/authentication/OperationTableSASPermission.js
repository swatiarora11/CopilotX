"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS = exports.OperationTableSASPermission = void 0;
const tslib_1 = require("tslib");
const operation_1 = tslib_1.__importDefault(require("../generated/artifacts/operation"));
const TableSASPermissions_1 = require("./TableSASPermissions");
class OperationTableSASPermission {
    constructor(permission = "") {
        this.permission = permission;
    }
    validate(permissions) {
        return this.validatePermissions(permissions);
    }
    validatePermissions(permissions) {
        for (const p of this.permission) {
            if (permissions.toString().includes(p)) {
                return true;
            }
        }
        return false;
    }
}
exports.OperationTableSASPermission = OperationTableSASPermission;
// See https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
// Table Service SAS Permissions for table level
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS = new Map();
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Service_SetProperties, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Service_GetProperties, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Service_GetStatistics, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Query, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Create, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Delete, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_QueryEntities, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_QueryEntitiesWithPartitionAndRowKey, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_UpdateEntity, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_MergeEntity, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_DeleteEntity, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_MergeEntityWithMerge, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_InsertEntity, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_GetAccessPolicy, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_SetAccessPolicy, new OperationTableSASPermission());
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_InsertEntity, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Add));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Query, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Query));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_QueryEntities, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Query));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_QueryEntitiesWithPartitionAndRowKey, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Query));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Service_GetProperties, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Query));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Service_GetStatistics, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Query));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Delete, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Delete));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_DeleteEntity, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Delete));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_UpdateEntity, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Update));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_MergeEntity, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Update));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_MergeEntityWithMerge, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Update));
exports.OPERATION_TABLE_SAS_TABLE_PERMISSIONS.set(operation_1.default.Table_Batch, new OperationTableSASPermission(TableSASPermissions_1.TableSASPermission.Add +
    TableSASPermissions_1.TableSASPermission.Delete +
    TableSASPermissions_1.TableSASPermission.Query +
    TableSASPermissions_1.TableSASPermission.Update));
//# sourceMappingURL=OperationTableSASPermission.js.map