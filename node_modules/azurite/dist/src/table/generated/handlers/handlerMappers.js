"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const operation_1 = tslib_1.__importDefault(require("../artifacts/operation"));
const operationHandlerMapping = {};
operationHandlerMapping[operation_1.default.Table_Query] = {
    arguments: [
        "options"
    ],
    handler: "tableHandler",
    method: "query"
};
operationHandlerMapping[operation_1.default.Table_Create] = {
    arguments: [
        "tableProperties",
        "options"
    ],
    handler: "tableHandler",
    method: "create"
};
operationHandlerMapping[operation_1.default.Table_Batch] = {
    arguments: [
        "body",
        "multipartContentType",
        "contentLength",
        "options"
    ],
    handler: "tableHandler",
    method: "batch"
};
operationHandlerMapping[operation_1.default.Table_Delete] = {
    arguments: [
        "table",
        "options"
    ],
    handler: "tableHandler",
    method: "delete"
};
operationHandlerMapping[operation_1.default.Table_QueryEntities] = {
    arguments: [
        "table",
        "options"
    ],
    handler: "tableHandler",
    method: "queryEntities"
};
operationHandlerMapping[operation_1.default.Table_QueryEntitiesWithPartitionAndRowKey] = {
    arguments: [
        "table",
        "partitionKey",
        "rowKey",
        "options"
    ],
    handler: "tableHandler",
    method: "queryEntitiesWithPartitionAndRowKey"
};
operationHandlerMapping[operation_1.default.Table_UpdateEntity] = {
    arguments: [
        "table",
        "partitionKey",
        "rowKey",
        "options"
    ],
    handler: "tableHandler",
    method: "updateEntity"
};
operationHandlerMapping[operation_1.default.Table_MergeEntity] = {
    arguments: [
        "table",
        "partitionKey",
        "rowKey",
        "options"
    ],
    handler: "tableHandler",
    method: "mergeEntity"
};
operationHandlerMapping[operation_1.default.Table_DeleteEntity] = {
    arguments: [
        "table",
        "partitionKey",
        "rowKey",
        "ifMatch",
        "options"
    ],
    handler: "tableHandler",
    method: "deleteEntity"
};
operationHandlerMapping[operation_1.default.Table_MergeEntityWithMerge] = {
    arguments: [
        "table",
        "partitionKey",
        "rowKey",
        "options"
    ],
    handler: "tableHandler",
    method: "mergeEntityWithMerge"
};
operationHandlerMapping[operation_1.default.Table_InsertEntity] = {
    arguments: [
        "table",
        "options"
    ],
    handler: "tableHandler",
    method: "insertEntity"
};
operationHandlerMapping[operation_1.default.Table_GetAccessPolicy] = {
    arguments: [
        "table",
        "options"
    ],
    handler: "tableHandler",
    method: "getAccessPolicy"
};
operationHandlerMapping[operation_1.default.Table_SetAccessPolicy] = {
    arguments: [
        "table",
        "options"
    ],
    handler: "tableHandler",
    method: "setAccessPolicy"
};
operationHandlerMapping[operation_1.default.Service_SetProperties] = {
    arguments: [
        "tableServiceProperties",
        "options"
    ],
    handler: "serviceHandler",
    method: "setProperties"
};
operationHandlerMapping[operation_1.default.Service_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Service_GetStatistics] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getStatistics"
};
function getHandlerByOperation(operation) {
    return operationHandlerMapping[operation];
}
exports.default = getHandlerByOperation;
//# sourceMappingURL=handlerMappers.js.map