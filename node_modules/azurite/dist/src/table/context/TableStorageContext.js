"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Context_1 = tslib_1.__importDefault(require("../generated/Context"));
class TableStorageContext extends Context_1.default {
    constructor(holderOrContext, path = "context", req, res) {
        super(holderOrContext, path, req, res);
        this._batchId = "";
        if (holderOrContext.batchId !== undefined &&
            holderOrContext.batchId !== "") {
            this._batchId = holderOrContext.batchId;
        }
    }
    get account() {
        return this.context.account;
    }
    set account(account) {
        this.context.account = account;
    }
    get tableName() {
        return this.context.tableName;
    }
    set tableName(tableName) {
        this.context.tableName = tableName;
    }
    get authenticationPath() {
        return this.context.authenticationPath;
    }
    set authenticationPath(path) {
        this.context.authenticationPath = path;
    }
    get partitionKey() {
        return this.context.partitionKey;
    }
    set partitionKey(partitionKey) {
        this.context.partitionKey = partitionKey;
    }
    get rowKey() {
        return this.context.rowKey;
    }
    set rowKey(rowKey) {
        this.context.rowKey = rowKey;
    }
    get xMsRequestID() {
        return this.contextID;
    }
    set xMsRequestID(xMsRequestID) {
        this.contextID = xMsRequestID;
    }
    get accept() {
        return this.context.accept;
    }
    set accept(accept) {
        this.context.accept = accept;
    }
    set isSecondary(isSecondary) {
        this.context.isSecondary = isSecondary;
    }
    get isSecondary() {
        return this.context.isSecondary;
    }
    // used for entity group transactions / batch processing
    set batchId(id) {
        this._batchId = id;
    }
    get batchId() {
        return this._batchId;
    }
}
exports.default = TableStorageContext;
//# sourceMappingURL=TableStorageContext.js.map