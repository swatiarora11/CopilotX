"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const operation_1 = tslib_1.__importDefault(require("../artifacts/operation"));
const operationHandlerMapping = {};
operationHandlerMapping[operation_1.default.Service_SetProperties] = {
    arguments: [
        "storageServiceProperties",
        "options"
    ],
    handler: "serviceHandler",
    method: "setProperties"
};
operationHandlerMapping[operation_1.default.Service_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Service_GetStatistics] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getStatistics"
};
operationHandlerMapping[operation_1.default.Service_ListQueuesSegment] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "listQueuesSegment"
};
operationHandlerMapping[operation_1.default.Queue_Create] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "create"
};
operationHandlerMapping[operation_1.default.Queue_Delete] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "delete"
};
operationHandlerMapping[operation_1.default.Queue_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Queue_GetPropertiesWithHead] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "getPropertiesWithHead"
};
operationHandlerMapping[operation_1.default.Queue_SetMetadata] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "setMetadata"
};
operationHandlerMapping[operation_1.default.Queue_GetAccessPolicy] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "getAccessPolicy"
};
operationHandlerMapping[operation_1.default.Queue_GetAccessPolicyWithHead] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "getAccessPolicyWithHead"
};
operationHandlerMapping[operation_1.default.Queue_SetAccessPolicy] = {
    arguments: [
        "options"
    ],
    handler: "queueHandler",
    method: "setAccessPolicy"
};
operationHandlerMapping[operation_1.default.Messages_Dequeue] = {
    arguments: [
        "options"
    ],
    handler: "messagesHandler",
    method: "dequeue"
};
operationHandlerMapping[operation_1.default.Messages_Clear] = {
    arguments: [
        "options"
    ],
    handler: "messagesHandler",
    method: "clear"
};
operationHandlerMapping[operation_1.default.Messages_Enqueue] = {
    arguments: [
        "queueMessage",
        "options"
    ],
    handler: "messagesHandler",
    method: "enqueue"
};
operationHandlerMapping[operation_1.default.Messages_Peek] = {
    arguments: [
        "options"
    ],
    handler: "messagesHandler",
    method: "peek"
};
operationHandlerMapping[operation_1.default.MessageId_Update] = {
    arguments: [
        "queueMessage",
        "popReceipt",
        "visibilitytimeout",
        "options"
    ],
    handler: "messageIdHandler",
    method: "update"
};
operationHandlerMapping[operation_1.default.MessageId_Delete] = {
    arguments: [
        "popReceipt",
        "options"
    ],
    handler: "messageIdHandler",
    method: "delete"
};
function getHandlerByOperation(operation) {
    return operationHandlerMapping[operation];
}
exports.default = getHandlerByOperation;
//# sourceMappingURL=handlerMappers.js.map