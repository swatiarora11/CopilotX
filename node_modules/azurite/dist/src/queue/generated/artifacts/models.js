"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version18 = exports.Version17 = exports.Version16 = exports.Version15 = exports.Version14 = exports.Version13 = exports.Version12 = exports.Version11 = exports.Version10 = exports.Version9 = exports.Version8 = exports.Version7 = exports.Version6 = exports.Version5 = exports.Version4 = exports.Version3 = exports.Version2 = exports.Version1 = exports.Version = exports.ListQueuesIncludeType = exports.GeoReplicationStatusType = exports.StorageErrorCode = void 0;
/**
 * Defines values for StorageErrorCode.
 * Possible values include: 'AccountAlreadyExists', 'AccountBeingCreated', 'AccountIsDisabled',
 * 'AuthenticationFailed', 'AuthorizationFailure', 'ConditionHeadersNotSupported',
 * 'ConditionNotMet', 'EmptyMetadataKey', 'InsufficientAccountPermissions', 'InternalError',
 * 'InvalidAuthenticationInfo', 'InvalidHeaderValue', 'InvalidHttpVerb', 'InvalidInput',
 * 'InvalidMd5', 'InvalidMetadata', 'InvalidQueryParameterValue', 'InvalidRange',
 * 'InvalidResourceName', 'InvalidUri', 'InvalidXmlDocument', 'InvalidXmlNodeValue', 'Md5Mismatch',
 * 'MetadataTooLarge', 'MissingContentLengthHeader', 'MissingRequiredQueryParameter',
 * 'MissingRequiredHeader', 'MissingRequiredXmlNode', 'MultipleConditionHeadersNotSupported',
 * 'OperationTimedOut', 'OutOfRangeInput', 'OutOfRangeQueryParameterValue', 'RequestBodyTooLarge',
 * 'ResourceTypeMismatch', 'RequestUrlFailedToParse', 'ResourceAlreadyExists', 'ResourceNotFound',
 * 'ServerBusy', 'UnsupportedHeader', 'UnsupportedXmlNode', 'UnsupportedQueryParameter',
 * 'UnsupportedHttpVerb', 'InvalidMarker', 'MessageNotFound', 'MessageTooLarge',
 * 'PopReceiptMismatch', 'QueueAlreadyExists', 'QueueBeingDeleted', 'QueueDisabled',
 * 'QueueNotEmpty', 'QueueNotFound'
 * @readonly
 * @enum {string}
 */
var StorageErrorCode;
(function (StorageErrorCode) {
    StorageErrorCode["AccountAlreadyExists"] = "AccountAlreadyExists";
    StorageErrorCode["AccountBeingCreated"] = "AccountBeingCreated";
    StorageErrorCode["AccountIsDisabled"] = "AccountIsDisabled";
    StorageErrorCode["AuthenticationFailed"] = "AuthenticationFailed";
    StorageErrorCode["AuthorizationFailure"] = "AuthorizationFailure";
    StorageErrorCode["ConditionHeadersNotSupported"] = "ConditionHeadersNotSupported";
    StorageErrorCode["ConditionNotMet"] = "ConditionNotMet";
    StorageErrorCode["EmptyMetadataKey"] = "EmptyMetadataKey";
    StorageErrorCode["InsufficientAccountPermissions"] = "InsufficientAccountPermissions";
    StorageErrorCode["InternalError"] = "InternalError";
    StorageErrorCode["InvalidAuthenticationInfo"] = "InvalidAuthenticationInfo";
    StorageErrorCode["InvalidHeaderValue"] = "InvalidHeaderValue";
    StorageErrorCode["InvalidHttpVerb"] = "InvalidHttpVerb";
    StorageErrorCode["InvalidInput"] = "InvalidInput";
    StorageErrorCode["InvalidMd5"] = "InvalidMd5";
    StorageErrorCode["InvalidMetadata"] = "InvalidMetadata";
    StorageErrorCode["InvalidQueryParameterValue"] = "InvalidQueryParameterValue";
    StorageErrorCode["InvalidRange"] = "InvalidRange";
    StorageErrorCode["InvalidResourceName"] = "InvalidResourceName";
    StorageErrorCode["InvalidUri"] = "InvalidUri";
    StorageErrorCode["InvalidXmlDocument"] = "InvalidXmlDocument";
    StorageErrorCode["InvalidXmlNodeValue"] = "InvalidXmlNodeValue";
    StorageErrorCode["Md5Mismatch"] = "Md5Mismatch";
    StorageErrorCode["MetadataTooLarge"] = "MetadataTooLarge";
    StorageErrorCode["MissingContentLengthHeader"] = "MissingContentLengthHeader";
    StorageErrorCode["MissingRequiredQueryParameter"] = "MissingRequiredQueryParameter";
    StorageErrorCode["MissingRequiredHeader"] = "MissingRequiredHeader";
    StorageErrorCode["MissingRequiredXmlNode"] = "MissingRequiredXmlNode";
    StorageErrorCode["MultipleConditionHeadersNotSupported"] = "MultipleConditionHeadersNotSupported";
    StorageErrorCode["OperationTimedOut"] = "OperationTimedOut";
    StorageErrorCode["OutOfRangeInput"] = "OutOfRangeInput";
    StorageErrorCode["OutOfRangeQueryParameterValue"] = "OutOfRangeQueryParameterValue";
    StorageErrorCode["RequestBodyTooLarge"] = "RequestBodyTooLarge";
    StorageErrorCode["ResourceTypeMismatch"] = "ResourceTypeMismatch";
    StorageErrorCode["RequestUrlFailedToParse"] = "RequestUrlFailedToParse";
    StorageErrorCode["ResourceAlreadyExists"] = "ResourceAlreadyExists";
    StorageErrorCode["ResourceNotFound"] = "ResourceNotFound";
    StorageErrorCode["ServerBusy"] = "ServerBusy";
    StorageErrorCode["UnsupportedHeader"] = "UnsupportedHeader";
    StorageErrorCode["UnsupportedXmlNode"] = "UnsupportedXmlNode";
    StorageErrorCode["UnsupportedQueryParameter"] = "UnsupportedQueryParameter";
    StorageErrorCode["UnsupportedHttpVerb"] = "UnsupportedHttpVerb";
    StorageErrorCode["InvalidMarker"] = "InvalidMarker";
    StorageErrorCode["MessageNotFound"] = "MessageNotFound";
    StorageErrorCode["MessageTooLarge"] = "MessageTooLarge";
    StorageErrorCode["PopReceiptMismatch"] = "PopReceiptMismatch";
    StorageErrorCode["QueueAlreadyExists"] = "QueueAlreadyExists";
    StorageErrorCode["QueueBeingDeleted"] = "QueueBeingDeleted";
    StorageErrorCode["QueueDisabled"] = "QueueDisabled";
    StorageErrorCode["QueueNotEmpty"] = "QueueNotEmpty";
    StorageErrorCode["QueueNotFound"] = "QueueNotFound";
})(StorageErrorCode || (exports.StorageErrorCode = StorageErrorCode = {}));
/**
 * Defines values for GeoReplicationStatusType.
 * Possible values include: 'live', 'bootstrap', 'unavailable'
 * @readonly
 * @enum {string}
 */
var GeoReplicationStatusType;
(function (GeoReplicationStatusType) {
    GeoReplicationStatusType["Live"] = "live";
    GeoReplicationStatusType["Bootstrap"] = "bootstrap";
    GeoReplicationStatusType["Unavailable"] = "unavailable";
})(GeoReplicationStatusType || (exports.GeoReplicationStatusType = GeoReplicationStatusType = {}));
/**
 * Defines values for ListQueuesIncludeType.
 * Possible values include: 'metadata'
 * @readonly
 * @enum {string}
 */
var ListQueuesIncludeType;
(function (ListQueuesIncludeType) {
    ListQueuesIncludeType["Metadata"] = "metadata";
})(ListQueuesIncludeType || (exports.ListQueuesIncludeType = ListQueuesIncludeType = {}));
/**
 * Defines values for Version.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version;
(function (Version) {
    Version["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version || (exports.Version = Version = {}));
/**
 * Defines values for Version1.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version1;
(function (Version1) {
    Version1["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version1 || (exports.Version1 = Version1 = {}));
/**
 * Defines values for Version2.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version2;
(function (Version2) {
    Version2["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version2 || (exports.Version2 = Version2 = {}));
/**
 * Defines values for Version3.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version3;
(function (Version3) {
    Version3["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version3 || (exports.Version3 = Version3 = {}));
/**
 * Defines values for Version4.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version4;
(function (Version4) {
    Version4["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version4 || (exports.Version4 = Version4 = {}));
/**
 * Defines values for Version5.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version5;
(function (Version5) {
    Version5["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version5 || (exports.Version5 = Version5 = {}));
/**
 * Defines values for Version6.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version6;
(function (Version6) {
    Version6["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version6 || (exports.Version6 = Version6 = {}));
/**
 * Defines values for Version7.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version7;
(function (Version7) {
    Version7["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version7 || (exports.Version7 = Version7 = {}));
/**
 * Defines values for Version8.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version8;
(function (Version8) {
    Version8["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version8 || (exports.Version8 = Version8 = {}));
/**
 * Defines values for Version9.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version9;
(function (Version9) {
    Version9["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version9 || (exports.Version9 = Version9 = {}));
/**
 * Defines values for Version10.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version10;
(function (Version10) {
    Version10["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version10 || (exports.Version10 = Version10 = {}));
/**
 * Defines values for Version11.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version11;
(function (Version11) {
    Version11["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version11 || (exports.Version11 = Version11 = {}));
/**
 * Defines values for Version12.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version12;
(function (Version12) {
    Version12["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version12 || (exports.Version12 = Version12 = {}));
/**
 * Defines values for Version13.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version13;
(function (Version13) {
    Version13["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version13 || (exports.Version13 = Version13 = {}));
/**
 * Defines values for Version14.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version14;
(function (Version14) {
    Version14["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version14 || (exports.Version14 = Version14 = {}));
/**
 * Defines values for Version15.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version15;
(function (Version15) {
    Version15["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version15 || (exports.Version15 = Version15 = {}));
/**
 * Defines values for Version16.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version16;
(function (Version16) {
    Version16["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version16 || (exports.Version16 = Version16 = {}));
/**
 * Defines values for Version17.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version17;
(function (Version17) {
    Version17["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version17 || (exports.Version17 = Version17 = {}));
/**
 * Defines values for Version18.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
var Version18;
(function (Version18) {
    Version18["TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo"] = "2019-02-02";
})(Version18 || (exports.Version18 = Version18 = {}));
//# sourceMappingURL=models.js.map