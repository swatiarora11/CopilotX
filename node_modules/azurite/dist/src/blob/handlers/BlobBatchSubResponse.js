"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobBatchSubResponse = void 0;
const http_1 = require("http");
const SubResponseTextBodyStream_1 = require("./SubResponseTextBodyStream");
class BlobBatchSubResponse {
    constructor(content_id, protocolWithVersion) {
        this.content_id = content_id;
        this.protocolWithVersion = protocolWithVersion;
        this.headers = {};
        this.bodyStream = new SubResponseTextBodyStream_1.SubResponseTextBodyStream(this);
    }
    setStatusCode(code) {
        this.statusCode = code;
        return this;
    }
    getStatusCode() {
        return this.statusCode;
    }
    setStatusMessage(message) {
        this.statusMessage = message;
        return this;
    }
    getStatusMessage() {
        return this.statusMessage || "";
    }
    setHeader(field, value) {
        if (typeof value === "number") {
            value = `${value}`;
        }
        if (typeof value === "boolean") {
            value = `${value}`;
        }
        // Cannot remove if block because of a potential TypeScript bug
        if (typeof value === "string" || value instanceof Array) {
            this.headers[field] = value;
        }
        return this;
    }
    getHeader(field) {
        return this.headers[field];
    }
    getHeaders() {
        return this.headers;
    }
    headersSent() {
        return false;
    }
    setContentType(value) {
        this.setHeader("content-type", value);
        return this;
    }
    getBodyStream() {
        return this.bodyStream;
    }
    getBodyContent() {
        return this.bodyStream.getBodyContent();
    }
    end() {
        this.setStatusMessage(http_1.STATUS_CODES[this.statusCode] || 'unknown');
    }
}
exports.BlobBatchSubResponse = BlobBatchSubResponse;
//# sourceMappingURL=BlobBatchSubResponse.js.map