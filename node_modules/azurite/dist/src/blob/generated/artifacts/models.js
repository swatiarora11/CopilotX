"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version22 = exports.Version21 = exports.Version20 = exports.Version19 = exports.Version18 = exports.Version17 = exports.Version16 = exports.Version15 = exports.Version14 = exports.Version13 = exports.Version12 = exports.Version11 = exports.Version10 = exports.Version9 = exports.Version8 = exports.Version7 = exports.Version6 = exports.Version5 = exports.Version4 = exports.Version3 = exports.Version2 = exports.Version1 = exports.Version = exports.SyncCopyStatusType = exports.AccountKind = exports.SkuName = exports.SequenceNumberActionType = exports.ListContainersIncludeType = exports.ListBlobsIncludeItem = exports.FilterBlobsIncludeItem = exports.EncryptionAlgorithmType = exports.DeleteSnapshotsOptionType = exports.BlobCopySourceTags = exports.BlockListType = exports.BlobExpiryOptions = exports.BlobDeleteType = exports.PremiumPageBlobAccessTier = exports.QueryFormatType = exports.GeoReplicationStatusType = exports.StorageErrorCode = exports.BlobImmutabilityPolicyMode = exports.RehydratePriority = exports.BlobType = exports.ArchiveStatus = exports.AccessTier = exports.LeaseStatusType = exports.LeaseStateType = exports.LeaseDurationType = exports.CopyStatusType = exports.PublicAccessType = void 0;
exports.Version72 = exports.Version71 = exports.Version70 = exports.Version69 = exports.Version68 = exports.Version67 = exports.Version66 = exports.Version65 = exports.Version64 = exports.Version63 = exports.Version62 = exports.Version61 = exports.Version60 = exports.Version59 = exports.Version58 = exports.Version57 = exports.Version56 = exports.Version55 = exports.Version54 = exports.Version53 = exports.Version52 = exports.Version51 = exports.Version50 = exports.Version49 = exports.Version48 = exports.Version47 = exports.Version46 = exports.Version45 = exports.Version44 = exports.Version43 = exports.Version42 = exports.Version41 = exports.Version40 = exports.Version39 = exports.Version38 = exports.Version37 = exports.Version36 = exports.Version35 = exports.Version34 = exports.Version33 = exports.Version32 = exports.Version31 = exports.Version30 = exports.Version29 = exports.Version28 = exports.Version27 = exports.Version26 = exports.Version25 = exports.Version24 = exports.Version23 = void 0;
/**
 * Defines values for PublicAccessType.
 * Possible values include: 'container', 'blob'
 * @readonly
 * @enum {string}
 */
var PublicAccessType;
(function (PublicAccessType) {
    PublicAccessType["Container"] = "container";
    PublicAccessType["Blob"] = "blob";
})(PublicAccessType || (exports.PublicAccessType = PublicAccessType = {}));
/**
 * Defines values for CopyStatusType.
 * Possible values include: 'pending', 'success', 'aborted', 'failed'
 * @readonly
 * @enum {string}
 */
var CopyStatusType;
(function (CopyStatusType) {
    CopyStatusType["Pending"] = "pending";
    CopyStatusType["Success"] = "success";
    CopyStatusType["Aborted"] = "aborted";
    CopyStatusType["Failed"] = "failed";
})(CopyStatusType || (exports.CopyStatusType = CopyStatusType = {}));
/**
 * Defines values for LeaseDurationType.
 * Possible values include: 'infinite', 'fixed'
 * @readonly
 * @enum {string}
 */
var LeaseDurationType;
(function (LeaseDurationType) {
    LeaseDurationType["Infinite"] = "infinite";
    LeaseDurationType["Fixed"] = "fixed";
})(LeaseDurationType || (exports.LeaseDurationType = LeaseDurationType = {}));
/**
 * Defines values for LeaseStateType.
 * Possible values include: 'available', 'leased', 'expired', 'breaking', 'broken'
 * @readonly
 * @enum {string}
 */
var LeaseStateType;
(function (LeaseStateType) {
    LeaseStateType["Available"] = "available";
    LeaseStateType["Leased"] = "leased";
    LeaseStateType["Expired"] = "expired";
    LeaseStateType["Breaking"] = "breaking";
    LeaseStateType["Broken"] = "broken";
})(LeaseStateType || (exports.LeaseStateType = LeaseStateType = {}));
/**
 * Defines values for LeaseStatusType.
 * Possible values include: 'locked', 'unlocked'
 * @readonly
 * @enum {string}
 */
var LeaseStatusType;
(function (LeaseStatusType) {
    LeaseStatusType["Locked"] = "locked";
    LeaseStatusType["Unlocked"] = "unlocked";
})(LeaseStatusType || (exports.LeaseStatusType = LeaseStatusType = {}));
/**
 * Defines values for AccessTier.
 * Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70',
 * 'P80', 'Hot', 'Cool', 'Archive', 'Premium', 'Cold'
 * @readonly
 * @enum {string}
 */
var AccessTier;
(function (AccessTier) {
    AccessTier["P4"] = "P4";
    AccessTier["P6"] = "P6";
    AccessTier["P10"] = "P10";
    AccessTier["P15"] = "P15";
    AccessTier["P20"] = "P20";
    AccessTier["P30"] = "P30";
    AccessTier["P40"] = "P40";
    AccessTier["P50"] = "P50";
    AccessTier["P60"] = "P60";
    AccessTier["P70"] = "P70";
    AccessTier["P80"] = "P80";
    AccessTier["Hot"] = "Hot";
    AccessTier["Cool"] = "Cool";
    AccessTier["Archive"] = "Archive";
    AccessTier["Premium"] = "Premium";
    AccessTier["Cold"] = "Cold";
})(AccessTier || (exports.AccessTier = AccessTier = {}));
/**
 * Defines values for ArchiveStatus.
 * Possible values include: 'rehydrate-pending-to-hot', 'rehydrate-pending-to-cool'ï¼Œ
 * 'rehydrate-pending-to-cold'
 * @readonly
 * @enum {string}
 */
var ArchiveStatus;
(function (ArchiveStatus) {
    ArchiveStatus["RehydratePendingToHot"] = "rehydrate-pending-to-hot";
    ArchiveStatus["RehydratePendingToCool"] = "rehydrate-pending-to-cool";
    ArchiveStatus["RehydratePendingToCold"] = "rehydrate-pending-to-cold";
})(ArchiveStatus || (exports.ArchiveStatus = ArchiveStatus = {}));
/**
 * Defines values for BlobType.
 * Possible values include: 'BlockBlob', 'PageBlob', 'AppendBlob'
 * @readonly
 * @enum {string}
 */
var BlobType;
(function (BlobType) {
    BlobType["BlockBlob"] = "BlockBlob";
    BlobType["PageBlob"] = "PageBlob";
    BlobType["AppendBlob"] = "AppendBlob";
})(BlobType || (exports.BlobType = BlobType = {}));
/**
 * Defines values for RehydratePriority.
 * Possible values include: 'High', 'Standard'
 * @readonly
 * @enum {string}
 */
var RehydratePriority;
(function (RehydratePriority) {
    RehydratePriority["High"] = "High";
    RehydratePriority["Standard"] = "Standard";
})(RehydratePriority || (exports.RehydratePriority = RehydratePriority = {}));
/**
 * Defines values for BlobImmutabilityPolicyMode.
 * Possible values include: 'Mutable', 'Unlocked', 'Locked'
 * @readonly
 * @enum {string}
 */
var BlobImmutabilityPolicyMode;
(function (BlobImmutabilityPolicyMode) {
    BlobImmutabilityPolicyMode["Mutable"] = "Mutable";
    BlobImmutabilityPolicyMode["Unlocked"] = "Unlocked";
    BlobImmutabilityPolicyMode["Locked"] = "Locked";
})(BlobImmutabilityPolicyMode || (exports.BlobImmutabilityPolicyMode = BlobImmutabilityPolicyMode = {}));
/**
 * Defines values for StorageErrorCode.
 * Possible values include: 'AccountAlreadyExists', 'AccountBeingCreated', 'AccountIsDisabled',
 * 'AuthenticationFailed', 'AuthorizationFailure', 'ConditionHeadersNotSupported',
 * 'ConditionNotMet', 'EmptyMetadataKey', 'InsufficientAccountPermissions', 'InternalError',
 * 'InvalidAuthenticationInfo', 'InvalidHeaderValue', 'InvalidHttpVerb', 'InvalidInput',
 * 'InvalidMd5', 'InvalidMetadata', 'InvalidQueryParameterValue', 'InvalidRange',
 * 'InvalidResourceName', 'InvalidUri', 'InvalidXmlDocument', 'InvalidXmlNodeValue', 'Md5Mismatch',
 * 'MetadataTooLarge', 'MissingContentLengthHeader', 'MissingRequiredQueryParameter',
 * 'MissingRequiredHeader', 'MissingRequiredXmlNode', 'MultipleConditionHeadersNotSupported',
 * 'OperationTimedOut', 'OutOfRangeInput', 'OutOfRangeQueryParameterValue', 'RequestBodyTooLarge',
 * 'ResourceTypeMismatch', 'RequestUrlFailedToParse', 'ResourceAlreadyExists', 'ResourceNotFound',
 * 'ServerBusy', 'UnsupportedHeader', 'UnsupportedXmlNode', 'UnsupportedQueryParameter',
 * 'UnsupportedHttpVerb', 'AppendPositionConditionNotMet', 'BlobAlreadyExists',
 * 'BlobImmutableDueToPolicy', 'BlobNotFound', 'BlobOverwritten',
 * 'BlobTierInadequateForContentLength', 'BlobUsesCustomerSpecifiedEncryption',
 * 'BlockCountExceedsLimit', 'BlockListTooLong', 'CannotChangeToLowerTier',
 * 'CannotVerifyCopySource', 'ContainerAlreadyExists', 'ContainerBeingDeleted',
 * 'ContainerDisabled', 'ContainerNotFound', 'ContentLengthLargerThanTierLimit',
 * 'CopyAcrossAccountsNotSupported', 'CopyIdMismatch', 'FeatureVersionMismatch',
 * 'IncrementalCopyBlobMismatch', 'IncrementalCopyOfEarlierVersionSnapshotNotAllowed',
 * 'IncrementalCopySourceMustBeSnapshot', 'InfiniteLeaseDurationRequired', 'InvalidBlobOrBlock',
 * 'InvalidBlobTier', 'InvalidBlobType', 'InvalidBlockId', 'InvalidBlockList', 'InvalidOperation',
 * 'InvalidPageRange', 'InvalidSourceBlobType', 'InvalidSourceBlobUrl',
 * 'InvalidVersionForPageBlobOperation', 'LeaseAlreadyPresent', 'LeaseAlreadyBroken',
 * 'LeaseIdMismatchWithBlobOperation', 'LeaseIdMismatchWithContainerOperation',
 * 'LeaseIdMismatchWithLeaseOperation', 'LeaseIdMissing', 'LeaseIsBreakingAndCannotBeAcquired',
 * 'LeaseIsBreakingAndCannotBeChanged', 'LeaseIsBrokenAndCannotBeRenewed', 'LeaseLost',
 * 'LeaseNotPresentWithBlobOperation', 'LeaseNotPresentWithContainerOperation',
 * 'LeaseNotPresentWithLeaseOperation', 'MaxBlobSizeConditionNotMet',
 * 'NoAuthenticationInformation', 'NoPendingCopyOperation',
 * 'OperationNotAllowedOnIncrementalCopyBlob', 'PendingCopyOperation',
 * 'PreviousSnapshotCannotBeNewer', 'PreviousSnapshotNotFound',
 * 'PreviousSnapshotOperationNotSupported', 'SequenceNumberConditionNotMet',
 * 'SequenceNumberIncrementTooLarge', 'SnapshotCountExceeded', 'SnapshotOperationRateExceeded',
 * 'SnapshotsPresent', 'SourceConditionNotMet', 'SystemInUse', 'TargetConditionNotMet',
 * 'UnauthorizedBlobOverwrite', 'BlobBeingRehydrated', 'BlobArchived', 'BlobNotArchived',
 * 'AuthorizationSourceIPMismatch', 'AuthorizationProtocolMismatch',
 * 'AuthorizationPermissionMismatch', 'AuthorizationServiceMismatch',
 * 'AuthorizationResourceTypeMismatch'
 * @readonly
 * @enum {string}
 */
var StorageErrorCode;
(function (StorageErrorCode) {
    StorageErrorCode["AccountAlreadyExists"] = "AccountAlreadyExists";
    StorageErrorCode["AccountBeingCreated"] = "AccountBeingCreated";
    StorageErrorCode["AccountIsDisabled"] = "AccountIsDisabled";
    StorageErrorCode["AuthenticationFailed"] = "AuthenticationFailed";
    StorageErrorCode["AuthorizationFailure"] = "AuthorizationFailure";
    StorageErrorCode["ConditionHeadersNotSupported"] = "ConditionHeadersNotSupported";
    StorageErrorCode["ConditionNotMet"] = "ConditionNotMet";
    StorageErrorCode["EmptyMetadataKey"] = "EmptyMetadataKey";
    StorageErrorCode["InsufficientAccountPermissions"] = "InsufficientAccountPermissions";
    StorageErrorCode["InternalError"] = "InternalError";
    StorageErrorCode["InvalidAuthenticationInfo"] = "InvalidAuthenticationInfo";
    StorageErrorCode["InvalidHeaderValue"] = "InvalidHeaderValue";
    StorageErrorCode["InvalidHttpVerb"] = "InvalidHttpVerb";
    StorageErrorCode["InvalidInput"] = "InvalidInput";
    StorageErrorCode["InvalidMd5"] = "InvalidMd5";
    StorageErrorCode["InvalidMetadata"] = "InvalidMetadata";
    StorageErrorCode["InvalidQueryParameterValue"] = "InvalidQueryParameterValue";
    StorageErrorCode["InvalidRange"] = "InvalidRange";
    StorageErrorCode["InvalidResourceName"] = "InvalidResourceName";
    StorageErrorCode["InvalidUri"] = "InvalidUri";
    StorageErrorCode["InvalidXmlDocument"] = "InvalidXmlDocument";
    StorageErrorCode["InvalidXmlNodeValue"] = "InvalidXmlNodeValue";
    StorageErrorCode["Md5Mismatch"] = "Md5Mismatch";
    StorageErrorCode["MetadataTooLarge"] = "MetadataTooLarge";
    StorageErrorCode["MissingContentLengthHeader"] = "MissingContentLengthHeader";
    StorageErrorCode["MissingRequiredQueryParameter"] = "MissingRequiredQueryParameter";
    StorageErrorCode["MissingRequiredHeader"] = "MissingRequiredHeader";
    StorageErrorCode["MissingRequiredXmlNode"] = "MissingRequiredXmlNode";
    StorageErrorCode["MultipleConditionHeadersNotSupported"] = "MultipleConditionHeadersNotSupported";
    StorageErrorCode["OperationTimedOut"] = "OperationTimedOut";
    StorageErrorCode["OutOfRangeInput"] = "OutOfRangeInput";
    StorageErrorCode["OutOfRangeQueryParameterValue"] = "OutOfRangeQueryParameterValue";
    StorageErrorCode["RequestBodyTooLarge"] = "RequestBodyTooLarge";
    StorageErrorCode["ResourceTypeMismatch"] = "ResourceTypeMismatch";
    StorageErrorCode["RequestUrlFailedToParse"] = "RequestUrlFailedToParse";
    StorageErrorCode["ResourceAlreadyExists"] = "ResourceAlreadyExists";
    StorageErrorCode["ResourceNotFound"] = "ResourceNotFound";
    StorageErrorCode["ServerBusy"] = "ServerBusy";
    StorageErrorCode["UnsupportedHeader"] = "UnsupportedHeader";
    StorageErrorCode["UnsupportedXmlNode"] = "UnsupportedXmlNode";
    StorageErrorCode["UnsupportedQueryParameter"] = "UnsupportedQueryParameter";
    StorageErrorCode["UnsupportedHttpVerb"] = "UnsupportedHttpVerb";
    StorageErrorCode["AppendPositionConditionNotMet"] = "AppendPositionConditionNotMet";
    StorageErrorCode["BlobAlreadyExists"] = "BlobAlreadyExists";
    StorageErrorCode["BlobImmutableDueToPolicy"] = "BlobImmutableDueToPolicy";
    StorageErrorCode["BlobNotFound"] = "BlobNotFound";
    StorageErrorCode["BlobOverwritten"] = "BlobOverwritten";
    StorageErrorCode["BlobTierInadequateForContentLength"] = "BlobTierInadequateForContentLength";
    StorageErrorCode["BlobUsesCustomerSpecifiedEncryption"] = "BlobUsesCustomerSpecifiedEncryption";
    StorageErrorCode["BlockCountExceedsLimit"] = "BlockCountExceedsLimit";
    StorageErrorCode["BlockListTooLong"] = "BlockListTooLong";
    StorageErrorCode["CannotChangeToLowerTier"] = "CannotChangeToLowerTier";
    StorageErrorCode["CannotVerifyCopySource"] = "CannotVerifyCopySource";
    StorageErrorCode["ContainerAlreadyExists"] = "ContainerAlreadyExists";
    StorageErrorCode["ContainerBeingDeleted"] = "ContainerBeingDeleted";
    StorageErrorCode["ContainerDisabled"] = "ContainerDisabled";
    StorageErrorCode["ContainerNotFound"] = "ContainerNotFound";
    StorageErrorCode["ContentLengthLargerThanTierLimit"] = "ContentLengthLargerThanTierLimit";
    StorageErrorCode["CopyAcrossAccountsNotSupported"] = "CopyAcrossAccountsNotSupported";
    StorageErrorCode["CopyIdMismatch"] = "CopyIdMismatch";
    StorageErrorCode["FeatureVersionMismatch"] = "FeatureVersionMismatch";
    StorageErrorCode["IncrementalCopyBlobMismatch"] = "IncrementalCopyBlobMismatch";
    StorageErrorCode["IncrementalCopyOfEarlierVersionSnapshotNotAllowed"] = "IncrementalCopyOfEarlierVersionSnapshotNotAllowed";
    StorageErrorCode["IncrementalCopySourceMustBeSnapshot"] = "IncrementalCopySourceMustBeSnapshot";
    StorageErrorCode["InfiniteLeaseDurationRequired"] = "InfiniteLeaseDurationRequired";
    StorageErrorCode["InvalidBlobOrBlock"] = "InvalidBlobOrBlock";
    StorageErrorCode["InvalidBlobTier"] = "InvalidBlobTier";
    StorageErrorCode["InvalidBlobType"] = "InvalidBlobType";
    StorageErrorCode["InvalidBlockId"] = "InvalidBlockId";
    StorageErrorCode["InvalidBlockList"] = "InvalidBlockList";
    StorageErrorCode["InvalidOperation"] = "InvalidOperation";
    StorageErrorCode["InvalidPageRange"] = "InvalidPageRange";
    StorageErrorCode["InvalidSourceBlobType"] = "InvalidSourceBlobType";
    StorageErrorCode["InvalidSourceBlobUrl"] = "InvalidSourceBlobUrl";
    StorageErrorCode["InvalidVersionForPageBlobOperation"] = "InvalidVersionForPageBlobOperation";
    StorageErrorCode["LeaseAlreadyPresent"] = "LeaseAlreadyPresent";
    StorageErrorCode["LeaseAlreadyBroken"] = "LeaseAlreadyBroken";
    StorageErrorCode["LeaseIdMismatchWithBlobOperation"] = "LeaseIdMismatchWithBlobOperation";
    StorageErrorCode["LeaseIdMismatchWithContainerOperation"] = "LeaseIdMismatchWithContainerOperation";
    StorageErrorCode["LeaseIdMismatchWithLeaseOperation"] = "LeaseIdMismatchWithLeaseOperation";
    StorageErrorCode["LeaseIdMissing"] = "LeaseIdMissing";
    StorageErrorCode["LeaseIsBreakingAndCannotBeAcquired"] = "LeaseIsBreakingAndCannotBeAcquired";
    StorageErrorCode["LeaseIsBreakingAndCannotBeChanged"] = "LeaseIsBreakingAndCannotBeChanged";
    StorageErrorCode["LeaseIsBrokenAndCannotBeRenewed"] = "LeaseIsBrokenAndCannotBeRenewed";
    StorageErrorCode["LeaseLost"] = "LeaseLost";
    StorageErrorCode["LeaseNotPresentWithBlobOperation"] = "LeaseNotPresentWithBlobOperation";
    StorageErrorCode["LeaseNotPresentWithContainerOperation"] = "LeaseNotPresentWithContainerOperation";
    StorageErrorCode["LeaseNotPresentWithLeaseOperation"] = "LeaseNotPresentWithLeaseOperation";
    StorageErrorCode["MaxBlobSizeConditionNotMet"] = "MaxBlobSizeConditionNotMet";
    StorageErrorCode["NoAuthenticationInformation"] = "NoAuthenticationInformation";
    StorageErrorCode["NoPendingCopyOperation"] = "NoPendingCopyOperation";
    StorageErrorCode["OperationNotAllowedOnIncrementalCopyBlob"] = "OperationNotAllowedOnIncrementalCopyBlob";
    StorageErrorCode["PendingCopyOperation"] = "PendingCopyOperation";
    StorageErrorCode["PreviousSnapshotCannotBeNewer"] = "PreviousSnapshotCannotBeNewer";
    StorageErrorCode["PreviousSnapshotNotFound"] = "PreviousSnapshotNotFound";
    StorageErrorCode["PreviousSnapshotOperationNotSupported"] = "PreviousSnapshotOperationNotSupported";
    StorageErrorCode["SequenceNumberConditionNotMet"] = "SequenceNumberConditionNotMet";
    StorageErrorCode["SequenceNumberIncrementTooLarge"] = "SequenceNumberIncrementTooLarge";
    StorageErrorCode["SnapshotCountExceeded"] = "SnapshotCountExceeded";
    StorageErrorCode["SnapshotOperationRateExceeded"] = "SnapshotOperationRateExceeded";
    StorageErrorCode["SnapshotsPresent"] = "SnapshotsPresent";
    StorageErrorCode["SourceConditionNotMet"] = "SourceConditionNotMet";
    StorageErrorCode["SystemInUse"] = "SystemInUse";
    StorageErrorCode["TargetConditionNotMet"] = "TargetConditionNotMet";
    StorageErrorCode["UnauthorizedBlobOverwrite"] = "UnauthorizedBlobOverwrite";
    StorageErrorCode["BlobBeingRehydrated"] = "BlobBeingRehydrated";
    StorageErrorCode["BlobArchived"] = "BlobArchived";
    StorageErrorCode["BlobNotArchived"] = "BlobNotArchived";
    StorageErrorCode["AuthorizationSourceIPMismatch"] = "AuthorizationSourceIPMismatch";
    StorageErrorCode["AuthorizationProtocolMismatch"] = "AuthorizationProtocolMismatch";
    StorageErrorCode["AuthorizationPermissionMismatch"] = "AuthorizationPermissionMismatch";
    StorageErrorCode["AuthorizationServiceMismatch"] = "AuthorizationServiceMismatch";
    StorageErrorCode["AuthorizationResourceTypeMismatch"] = "AuthorizationResourceTypeMismatch";
})(StorageErrorCode || (exports.StorageErrorCode = StorageErrorCode = {}));
/**
 * Defines values for GeoReplicationStatusType.
 * Possible values include: 'live', 'bootstrap', 'unavailable'
 * @readonly
 * @enum {string}
 */
var GeoReplicationStatusType;
(function (GeoReplicationStatusType) {
    GeoReplicationStatusType["Live"] = "live";
    GeoReplicationStatusType["Bootstrap"] = "bootstrap";
    GeoReplicationStatusType["Unavailable"] = "unavailable";
})(GeoReplicationStatusType || (exports.GeoReplicationStatusType = GeoReplicationStatusType = {}));
/**
 * Defines values for QueryFormatType.
 * Possible values include: 'delimited', 'json', 'arrow', 'parquet'
 * @readonly
 * @enum {string}
 */
var QueryFormatType;
(function (QueryFormatType) {
    QueryFormatType["Delimited"] = "delimited";
    QueryFormatType["Json"] = "json";
    QueryFormatType["Arrow"] = "arrow";
    QueryFormatType["Parquet"] = "parquet";
})(QueryFormatType || (exports.QueryFormatType = QueryFormatType = {}));
/**
 * Defines values for PremiumPageBlobAccessTier.
 * Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70',
 * 'P80'
 * @readonly
 * @enum {string}
 */
var PremiumPageBlobAccessTier;
(function (PremiumPageBlobAccessTier) {
    PremiumPageBlobAccessTier["P4"] = "P4";
    PremiumPageBlobAccessTier["P6"] = "P6";
    PremiumPageBlobAccessTier["P10"] = "P10";
    PremiumPageBlobAccessTier["P15"] = "P15";
    PremiumPageBlobAccessTier["P20"] = "P20";
    PremiumPageBlobAccessTier["P30"] = "P30";
    PremiumPageBlobAccessTier["P40"] = "P40";
    PremiumPageBlobAccessTier["P50"] = "P50";
    PremiumPageBlobAccessTier["P60"] = "P60";
    PremiumPageBlobAccessTier["P70"] = "P70";
    PremiumPageBlobAccessTier["P80"] = "P80";
})(PremiumPageBlobAccessTier || (exports.PremiumPageBlobAccessTier = PremiumPageBlobAccessTier = {}));
/**
 * Defines values for BlobDeleteType.
 * Possible values include: 'Permanent'
 * @readonly
 * @enum {string}
 */
var BlobDeleteType;
(function (BlobDeleteType) {
    BlobDeleteType["Permanent"] = "Permanent";
})(BlobDeleteType || (exports.BlobDeleteType = BlobDeleteType = {}));
/**
 * Defines values for BlobExpiryOptions.
 * Possible values include: 'NeverExpire', 'RelativeToCreation', 'RelativeToNow', 'Absolute'
 * @readonly
 * @enum {string}
 */
var BlobExpiryOptions;
(function (BlobExpiryOptions) {
    BlobExpiryOptions["NeverExpire"] = "NeverExpire";
    BlobExpiryOptions["RelativeToCreation"] = "RelativeToCreation";
    BlobExpiryOptions["RelativeToNow"] = "RelativeToNow";
    BlobExpiryOptions["Absolute"] = "Absolute";
})(BlobExpiryOptions || (exports.BlobExpiryOptions = BlobExpiryOptions = {}));
/**
 * Defines values for BlockListType.
 * Possible values include: 'committed', 'uncommitted', 'all'
 * @readonly
 * @enum {string}
 */
var BlockListType;
(function (BlockListType) {
    BlockListType["Committed"] = "committed";
    BlockListType["Uncommitted"] = "uncommitted";
    BlockListType["All"] = "all";
})(BlockListType || (exports.BlockListType = BlockListType = {}));
/**
 * Defines values for BlobCopySourceTags.
 * Possible values include: 'REPLACE', 'COPY'
 * @readonly
 * @enum {string}
 */
var BlobCopySourceTags;
(function (BlobCopySourceTags) {
    BlobCopySourceTags["REPLACE"] = "REPLACE";
    BlobCopySourceTags["COPY"] = "COPY";
})(BlobCopySourceTags || (exports.BlobCopySourceTags = BlobCopySourceTags = {}));
/**
 * Defines values for DeleteSnapshotsOptionType.
 * Possible values include: 'include', 'only'
 * @readonly
 * @enum {string}
 */
var DeleteSnapshotsOptionType;
(function (DeleteSnapshotsOptionType) {
    DeleteSnapshotsOptionType["Include"] = "include";
    DeleteSnapshotsOptionType["Only"] = "only";
})(DeleteSnapshotsOptionType || (exports.DeleteSnapshotsOptionType = DeleteSnapshotsOptionType = {}));
/**
 * Defines values for EncryptionAlgorithmType.
 * Possible values include: 'AES256'
 * @readonly
 * @enum {string}
 */
var EncryptionAlgorithmType;
(function (EncryptionAlgorithmType) {
    EncryptionAlgorithmType["AES256"] = "AES256";
})(EncryptionAlgorithmType || (exports.EncryptionAlgorithmType = EncryptionAlgorithmType = {}));
/**
 * Defines values for FilterBlobsIncludeItem.
 * Possible values include: 'none', 'versions'
 * @readonly
 * @enum {string}
 */
var FilterBlobsIncludeItem;
(function (FilterBlobsIncludeItem) {
    FilterBlobsIncludeItem["None"] = "none";
    FilterBlobsIncludeItem["Versions"] = "versions";
})(FilterBlobsIncludeItem || (exports.FilterBlobsIncludeItem = FilterBlobsIncludeItem = {}));
/**
 * Defines values for ListBlobsIncludeItem.
 * Possible values include: '', 'copy', 'deleted', 'metadata', 'snapshots', 'uncommittedblobs',
 * 'versions', 'tags', 'immutabilitypolicy', 'legalhold', 'deletedwithversions', 'permissions'
 * @readonly
 * @enum {string}
 */
var ListBlobsIncludeItem;
(function (ListBlobsIncludeItem) {
    ListBlobsIncludeItem["EmptyString"] = "";
    ListBlobsIncludeItem["Copy"] = "copy";
    ListBlobsIncludeItem["Deleted"] = "deleted";
    ListBlobsIncludeItem["Metadata"] = "metadata";
    ListBlobsIncludeItem["Snapshots"] = "snapshots";
    ListBlobsIncludeItem["Uncommittedblobs"] = "uncommittedblobs";
    ListBlobsIncludeItem["Versions"] = "versions";
    ListBlobsIncludeItem["Tags"] = "tags";
    ListBlobsIncludeItem["Immutabilitypolicy"] = "immutabilitypolicy";
    ListBlobsIncludeItem["Legalhold"] = "legalhold";
    ListBlobsIncludeItem["Deletedwithversions"] = "deletedwithversions";
    ListBlobsIncludeItem["Permissions"] = "permissions";
})(ListBlobsIncludeItem || (exports.ListBlobsIncludeItem = ListBlobsIncludeItem = {}));
/**
 * Defines values for ListContainersIncludeType.
 * Possible values include: '', 'metadata', 'deleted', 'system'
 * @readonly
 * @enum {string}
 */
var ListContainersIncludeType;
(function (ListContainersIncludeType) {
    ListContainersIncludeType["EmptyString"] = "";
    ListContainersIncludeType["Metadata"] = "metadata";
    ListContainersIncludeType["Deleted"] = "deleted";
    ListContainersIncludeType["System"] = "system";
})(ListContainersIncludeType || (exports.ListContainersIncludeType = ListContainersIncludeType = {}));
/**
 * Defines values for SequenceNumberActionType.
 * Possible values include: 'max', 'update', 'increment'
 * @readonly
 * @enum {string}
 */
var SequenceNumberActionType;
(function (SequenceNumberActionType) {
    SequenceNumberActionType["Max"] = "max";
    SequenceNumberActionType["Update"] = "update";
    SequenceNumberActionType["Increment"] = "increment";
})(SequenceNumberActionType || (exports.SequenceNumberActionType = SequenceNumberActionType = {}));
/**
 * Defines values for SkuName.
 * Possible values include: 'Standard_LRS', 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS',
 * 'Premium_LRS'
 * @readonly
 * @enum {string}
 */
var SkuName;
(function (SkuName) {
    SkuName["StandardLRS"] = "Standard_LRS";
    SkuName["StandardGRS"] = "Standard_GRS";
    SkuName["StandardRAGRS"] = "Standard_RAGRS";
    SkuName["StandardZRS"] = "Standard_ZRS";
    SkuName["PremiumLRS"] = "Premium_LRS";
})(SkuName || (exports.SkuName = SkuName = {}));
/**
 * Defines values for AccountKind.
 * Possible values include: 'Storage', 'BlobStorage', 'StorageV2', 'FileStorage',
 * 'BlockBlobStorage'
 * @readonly
 * @enum {string}
 */
var AccountKind;
(function (AccountKind) {
    AccountKind["Storage"] = "Storage";
    AccountKind["BlobStorage"] = "BlobStorage";
    AccountKind["StorageV2"] = "StorageV2";
    AccountKind["FileStorage"] = "FileStorage";
    AccountKind["BlockBlobStorage"] = "BlockBlobStorage";
})(AccountKind || (exports.AccountKind = AccountKind = {}));
/**
 * Defines values for SyncCopyStatusType.
 * Possible values include: 'success'
 * @readonly
 * @enum {string}
 */
var SyncCopyStatusType;
(function (SyncCopyStatusType) {
    SyncCopyStatusType["Success"] = "success";
})(SyncCopyStatusType || (exports.SyncCopyStatusType = SyncCopyStatusType = {}));
/**
 * Defines values for Version.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version;
(function (Version) {
    Version["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version || (exports.Version = Version = {}));
/**
 * Defines values for Version1.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version1;
(function (Version1) {
    Version1["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version1 || (exports.Version1 = Version1 = {}));
/**
 * Defines values for Version2.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version2;
(function (Version2) {
    Version2["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version2 || (exports.Version2 = Version2 = {}));
/**
 * Defines values for Version3.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version3;
(function (Version3) {
    Version3["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version3 || (exports.Version3 = Version3 = {}));
/**
 * Defines values for Version4.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version4;
(function (Version4) {
    Version4["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version4 || (exports.Version4 = Version4 = {}));
/**
 * Defines values for Version5.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version5;
(function (Version5) {
    Version5["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version5 || (exports.Version5 = Version5 = {}));
/**
 * Defines values for Version6.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version6;
(function (Version6) {
    Version6["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version6 || (exports.Version6 = Version6 = {}));
/**
 * Defines values for Version7.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version7;
(function (Version7) {
    Version7["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version7 || (exports.Version7 = Version7 = {}));
/**
 * Defines values for Version8.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version8;
(function (Version8) {
    Version8["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version8 || (exports.Version8 = Version8 = {}));
/**
 * Defines values for Version9.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version9;
(function (Version9) {
    Version9["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version9 || (exports.Version9 = Version9 = {}));
/**
 * Defines values for Version10.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version10;
(function (Version10) {
    Version10["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version10 || (exports.Version10 = Version10 = {}));
/**
 * Defines values for Version11.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version11;
(function (Version11) {
    Version11["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version11 || (exports.Version11 = Version11 = {}));
/**
 * Defines values for Version12.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version12;
(function (Version12) {
    Version12["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version12 || (exports.Version12 = Version12 = {}));
/**
 * Defines values for Version13.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version13;
(function (Version13) {
    Version13["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version13 || (exports.Version13 = Version13 = {}));
/**
 * Defines values for Version14.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version14;
(function (Version14) {
    Version14["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version14 || (exports.Version14 = Version14 = {}));
/**
 * Defines values for Version15.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version15;
(function (Version15) {
    Version15["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version15 || (exports.Version15 = Version15 = {}));
/**
 * Defines values for Version16.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version16;
(function (Version16) {
    Version16["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version16 || (exports.Version16 = Version16 = {}));
/**
 * Defines values for Version17.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version17;
(function (Version17) {
    Version17["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version17 || (exports.Version17 = Version17 = {}));
/**
 * Defines values for Version18.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version18;
(function (Version18) {
    Version18["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version18 || (exports.Version18 = Version18 = {}));
/**
 * Defines values for Version19.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version19;
(function (Version19) {
    Version19["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version19 || (exports.Version19 = Version19 = {}));
/**
 * Defines values for Version20.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version20;
(function (Version20) {
    Version20["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version20 || (exports.Version20 = Version20 = {}));
/**
 * Defines values for Version21.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version21;
(function (Version21) {
    Version21["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version21 || (exports.Version21 = Version21 = {}));
/**
 * Defines values for Version22.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version22;
(function (Version22) {
    Version22["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version22 || (exports.Version22 = Version22 = {}));
/**
 * Defines values for Version23.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version23;
(function (Version23) {
    Version23["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version23 || (exports.Version23 = Version23 = {}));
/**
 * Defines values for Version24.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version24;
(function (Version24) {
    Version24["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version24 || (exports.Version24 = Version24 = {}));
/**
 * Defines values for Version25.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version25;
(function (Version25) {
    Version25["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version25 || (exports.Version25 = Version25 = {}));
/**
 * Defines values for Version26.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version26;
(function (Version26) {
    Version26["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version26 || (exports.Version26 = Version26 = {}));
/**
 * Defines values for Version27.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version27;
(function (Version27) {
    Version27["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version27 || (exports.Version27 = Version27 = {}));
/**
 * Defines values for Version28.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version28;
(function (Version28) {
    Version28["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version28 || (exports.Version28 = Version28 = {}));
/**
 * Defines values for Version29.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version29;
(function (Version29) {
    Version29["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version29 || (exports.Version29 = Version29 = {}));
/**
 * Defines values for Version30.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version30;
(function (Version30) {
    Version30["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version30 || (exports.Version30 = Version30 = {}));
/**
 * Defines values for Version31.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version31;
(function (Version31) {
    Version31["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version31 || (exports.Version31 = Version31 = {}));
/**
 * Defines values for Version32.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version32;
(function (Version32) {
    Version32["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version32 || (exports.Version32 = Version32 = {}));
/**
 * Defines values for Version33.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version33;
(function (Version33) {
    Version33["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version33 || (exports.Version33 = Version33 = {}));
/**
 * Defines values for Version34.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version34;
(function (Version34) {
    Version34["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version34 || (exports.Version34 = Version34 = {}));
/**
 * Defines values for Version35.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version35;
(function (Version35) {
    Version35["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version35 || (exports.Version35 = Version35 = {}));
/**
 * Defines values for Version36.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version36;
(function (Version36) {
    Version36["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version36 || (exports.Version36 = Version36 = {}));
/**
 * Defines values for Version37.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version37;
(function (Version37) {
    Version37["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version37 || (exports.Version37 = Version37 = {}));
/**
 * Defines values for Version38.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version38;
(function (Version38) {
    Version38["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version38 || (exports.Version38 = Version38 = {}));
/**
 * Defines values for Version39.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version39;
(function (Version39) {
    Version39["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version39 || (exports.Version39 = Version39 = {}));
/**
 * Defines values for Version40.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version40;
(function (Version40) {
    Version40["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version40 || (exports.Version40 = Version40 = {}));
/**
 * Defines values for Version41.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version41;
(function (Version41) {
    Version41["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version41 || (exports.Version41 = Version41 = {}));
/**
 * Defines values for Version42.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version42;
(function (Version42) {
    Version42["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version42 || (exports.Version42 = Version42 = {}));
/**
 * Defines values for Version43.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version43;
(function (Version43) {
    Version43["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version43 || (exports.Version43 = Version43 = {}));
/**
 * Defines values for Version44.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version44;
(function (Version44) {
    Version44["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version44 || (exports.Version44 = Version44 = {}));
/**
 * Defines values for Version45.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version45;
(function (Version45) {
    Version45["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version45 || (exports.Version45 = Version45 = {}));
/**
 * Defines values for Version46.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version46;
(function (Version46) {
    Version46["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version46 || (exports.Version46 = Version46 = {}));
/**
 * Defines values for Version47.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version47;
(function (Version47) {
    Version47["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version47 || (exports.Version47 = Version47 = {}));
/**
 * Defines values for Version48.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version48;
(function (Version48) {
    Version48["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version48 || (exports.Version48 = Version48 = {}));
/**
 * Defines values for Version49.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version49;
(function (Version49) {
    Version49["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version49 || (exports.Version49 = Version49 = {}));
/**
 * Defines values for Version50.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version50;
(function (Version50) {
    Version50["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version50 || (exports.Version50 = Version50 = {}));
/**
 * Defines values for Version51.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version51;
(function (Version51) {
    Version51["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version51 || (exports.Version51 = Version51 = {}));
/**
 * Defines values for Version52.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version52;
(function (Version52) {
    Version52["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version52 || (exports.Version52 = Version52 = {}));
/**
 * Defines values for Version53.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version53;
(function (Version53) {
    Version53["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version53 || (exports.Version53 = Version53 = {}));
/**
 * Defines values for Version54.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version54;
(function (Version54) {
    Version54["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version54 || (exports.Version54 = Version54 = {}));
/**
 * Defines values for Version55.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version55;
(function (Version55) {
    Version55["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version55 || (exports.Version55 = Version55 = {}));
/**
 * Defines values for Version56.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version56;
(function (Version56) {
    Version56["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version56 || (exports.Version56 = Version56 = {}));
/**
 * Defines values for Version57.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version57;
(function (Version57) {
    Version57["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version57 || (exports.Version57 = Version57 = {}));
/**
 * Defines values for Version58.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version58;
(function (Version58) {
    Version58["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version58 || (exports.Version58 = Version58 = {}));
/**
 * Defines values for Version59.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version59;
(function (Version59) {
    Version59["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version59 || (exports.Version59 = Version59 = {}));
/**
 * Defines values for Version60.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version60;
(function (Version60) {
    Version60["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version60 || (exports.Version60 = Version60 = {}));
/**
 * Defines values for Version61.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version61;
(function (Version61) {
    Version61["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version61 || (exports.Version61 = Version61 = {}));
/**
 * Defines values for Version62.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version62;
(function (Version62) {
    Version62["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version62 || (exports.Version62 = Version62 = {}));
/**
 * Defines values for Version63.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version63;
(function (Version63) {
    Version63["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version63 || (exports.Version63 = Version63 = {}));
/**
 * Defines values for Version64.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version64;
(function (Version64) {
    Version64["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version64 || (exports.Version64 = Version64 = {}));
/**
 * Defines values for Version65.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version65;
(function (Version65) {
    Version65["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version65 || (exports.Version65 = Version65 = {}));
/**
 * Defines values for Version66.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version66;
(function (Version66) {
    Version66["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version66 || (exports.Version66 = Version66 = {}));
/**
 * Defines values for Version67.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version67;
(function (Version67) {
    Version67["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version67 || (exports.Version67 = Version67 = {}));
/**
 * Defines values for Version68.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version68;
(function (Version68) {
    Version68["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version68 || (exports.Version68 = Version68 = {}));
/**
 * Defines values for Version69.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version69;
(function (Version69) {
    Version69["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version69 || (exports.Version69 = Version69 = {}));
/**
 * Defines values for Version70.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version70;
(function (Version70) {
    Version70["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version70 || (exports.Version70 = Version70 = {}));
/**
 * Defines values for Version71.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version71;
(function (Version71) {
    Version71["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version71 || (exports.Version71 = Version71 = {}));
/**
 * Defines values for Version72.
 * Possible values include: '2021-10-04'
 * @readonly
 * @enum {string}
 */
var Version72;
(function (Version72) {
    Version72["TwoZeroTwoOneHyphenMinusOneZeroHyphenMinusZeroFour"] = "2021-10-04";
})(Version72 || (exports.Version72 = Version72 = {}));
//# sourceMappingURL=models.js.map