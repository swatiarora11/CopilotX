"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const operation_1 = tslib_1.__importDefault(require("../artifacts/operation"));
const operationHandlerMapping = {};
operationHandlerMapping[operation_1.default.Service_SetProperties] = {
    arguments: [
        "storageServiceProperties",
        "options"
    ],
    handler: "serviceHandler",
    method: "setProperties"
};
operationHandlerMapping[operation_1.default.Service_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Service_GetStatistics] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "getStatistics"
};
operationHandlerMapping[operation_1.default.Service_ListContainersSegment] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "listContainersSegment"
};
operationHandlerMapping[operation_1.default.Service_GetUserDelegationKey] = {
    arguments: [
        "keyInfo",
        "options"
    ],
    handler: "serviceHandler",
    method: "getUserDelegationKey"
};
operationHandlerMapping[operation_1.default.Service_GetAccountInfo] = {
    arguments: [],
    handler: "serviceHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Service_GetAccountInfoWithHead] = {
    arguments: [],
    handler: "serviceHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Service_SubmitBatch] = {
    arguments: [
        "body",
        "contentLength",
        "multipartContentType",
        "options"
    ],
    handler: "serviceHandler",
    method: "submitBatch"
};
operationHandlerMapping[operation_1.default.Service_FilterBlobs] = {
    arguments: [
        "options"
    ],
    handler: "serviceHandler",
    method: "filterBlobs"
};
operationHandlerMapping[operation_1.default.Container_Create] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "create"
};
operationHandlerMapping[operation_1.default.Container_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Container_GetPropertiesWithHead] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Container_Delete] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "delete"
};
operationHandlerMapping[operation_1.default.Container_SetMetadata] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "setMetadata"
};
operationHandlerMapping[operation_1.default.Container_GetAccessPolicy] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "getAccessPolicy"
};
operationHandlerMapping[operation_1.default.Container_SetAccessPolicy] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "setAccessPolicy"
};
operationHandlerMapping[operation_1.default.Container_Restore] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "restore"
};
operationHandlerMapping[operation_1.default.Container_SubmitBatch] = {
    arguments: [
        "body",
        "contentLength",
        "multipartContentType",
        "options"
    ],
    handler: "containerHandler",
    method: "submitBatch"
};
operationHandlerMapping[operation_1.default.Container_FilterBlobs] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "filterBlobs"
};
operationHandlerMapping[operation_1.default.Container_AcquireLease] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "acquireLease"
};
operationHandlerMapping[operation_1.default.Container_ReleaseLease] = {
    arguments: [
        "leaseId",
        "options"
    ],
    handler: "containerHandler",
    method: "releaseLease"
};
operationHandlerMapping[operation_1.default.Container_RenewLease] = {
    arguments: [
        "leaseId",
        "options"
    ],
    handler: "containerHandler",
    method: "renewLease"
};
operationHandlerMapping[operation_1.default.Container_BreakLease] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "breakLease"
};
operationHandlerMapping[operation_1.default.Container_ChangeLease] = {
    arguments: [
        "leaseId",
        "proposedLeaseId",
        "options"
    ],
    handler: "containerHandler",
    method: "changeLease"
};
operationHandlerMapping[operation_1.default.Container_ListBlobFlatSegment] = {
    arguments: [
        "options"
    ],
    handler: "containerHandler",
    method: "listBlobFlatSegment"
};
operationHandlerMapping[operation_1.default.Container_ListBlobHierarchySegment] = {
    arguments: [
        "delimiter",
        "options"
    ],
    handler: "containerHandler",
    method: "listBlobHierarchySegment"
};
operationHandlerMapping[operation_1.default.Container_GetAccountInfo] = {
    arguments: [],
    handler: "containerHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Container_GetAccountInfoWithHead] = {
    arguments: [],
    handler: "containerHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Blob_Download] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "download"
};
operationHandlerMapping[operation_1.default.Blob_GetProperties] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "getProperties"
};
operationHandlerMapping[operation_1.default.Blob_Delete] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "delete"
};
operationHandlerMapping[operation_1.default.Blob_Undelete] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "undelete"
};
operationHandlerMapping[operation_1.default.Blob_SetExpiry] = {
    arguments: [
        "expiryOptions",
        "options"
    ],
    handler: "blobHandler",
    method: "setExpiry"
};
operationHandlerMapping[operation_1.default.Blob_SetHTTPHeaders] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "setHTTPHeaders"
};
operationHandlerMapping[operation_1.default.Blob_SetImmutabilityPolicy] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "setImmutabilityPolicy"
};
operationHandlerMapping[operation_1.default.Blob_DeleteImmutabilityPolicy] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "deleteImmutabilityPolicy"
};
operationHandlerMapping[operation_1.default.Blob_SetLegalHold] = {
    arguments: [
        "legalHold",
        "options"
    ],
    handler: "blobHandler",
    method: "setLegalHold"
};
operationHandlerMapping[operation_1.default.Blob_SetMetadata] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "setMetadata"
};
operationHandlerMapping[operation_1.default.Blob_AcquireLease] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "acquireLease"
};
operationHandlerMapping[operation_1.default.Blob_ReleaseLease] = {
    arguments: [
        "leaseId",
        "options"
    ],
    handler: "blobHandler",
    method: "releaseLease"
};
operationHandlerMapping[operation_1.default.Blob_RenewLease] = {
    arguments: [
        "leaseId",
        "options"
    ],
    handler: "blobHandler",
    method: "renewLease"
};
operationHandlerMapping[operation_1.default.Blob_ChangeLease] = {
    arguments: [
        "leaseId",
        "proposedLeaseId",
        "options"
    ],
    handler: "blobHandler",
    method: "changeLease"
};
operationHandlerMapping[operation_1.default.Blob_BreakLease] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "breakLease"
};
operationHandlerMapping[operation_1.default.Blob_CreateSnapshot] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "createSnapshot"
};
operationHandlerMapping[operation_1.default.Blob_StartCopyFromURL] = {
    arguments: [
        "copySource",
        "options"
    ],
    handler: "blobHandler",
    method: "startCopyFromURL"
};
operationHandlerMapping[operation_1.default.Blob_CopyFromURL] = {
    arguments: [
        "copySource",
        "options"
    ],
    handler: "blobHandler",
    method: "copyFromURL"
};
operationHandlerMapping[operation_1.default.Blob_AbortCopyFromURL] = {
    arguments: [
        "copyId",
        "options"
    ],
    handler: "blobHandler",
    method: "abortCopyFromURL"
};
operationHandlerMapping[operation_1.default.Blob_SetTier] = {
    arguments: [
        "tier",
        "options"
    ],
    handler: "blobHandler",
    method: "setTier"
};
operationHandlerMapping[operation_1.default.Blob_GetAccountInfo] = {
    arguments: [],
    handler: "blobHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Blob_GetAccountInfoWithHead] = {
    arguments: [],
    handler: "blobHandler",
    method: "getAccountInfo"
};
operationHandlerMapping[operation_1.default.Blob_Query] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "query"
};
operationHandlerMapping[operation_1.default.Blob_GetTags] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "getTags"
};
operationHandlerMapping[operation_1.default.Blob_SetTags] = {
    arguments: [
        "options"
    ],
    handler: "blobHandler",
    method: "setTags"
};
operationHandlerMapping[operation_1.default.PageBlob_Create] = {
    arguments: [
        "contentLength",
        "blobContentLength",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "create"
};
operationHandlerMapping[operation_1.default.PageBlob_UploadPages] = {
    arguments: [
        "body",
        "contentLength",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "uploadPages"
};
operationHandlerMapping[operation_1.default.PageBlob_ClearPages] = {
    arguments: [
        "contentLength",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "clearPages"
};
operationHandlerMapping[operation_1.default.PageBlob_UploadPagesFromURL] = {
    arguments: [
        "sourceUrl",
        "sourceRange",
        "contentLength",
        "range",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "uploadPagesFromURL"
};
operationHandlerMapping[operation_1.default.PageBlob_GetPageRanges] = {
    arguments: [
        "options"
    ],
    handler: "pageBlobHandler",
    method: "getPageRanges"
};
operationHandlerMapping[operation_1.default.PageBlob_GetPageRangesDiff] = {
    arguments: [
        "options"
    ],
    handler: "pageBlobHandler",
    method: "getPageRangesDiff"
};
operationHandlerMapping[operation_1.default.PageBlob_Resize] = {
    arguments: [
        "blobContentLength",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "resize"
};
operationHandlerMapping[operation_1.default.PageBlob_UpdateSequenceNumber] = {
    arguments: [
        "sequenceNumberAction",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "updateSequenceNumber"
};
operationHandlerMapping[operation_1.default.PageBlob_CopyIncremental] = {
    arguments: [
        "copySource",
        "options"
    ],
    handler: "pageBlobHandler",
    method: "copyIncremental"
};
operationHandlerMapping[operation_1.default.AppendBlob_Create] = {
    arguments: [
        "contentLength",
        "options"
    ],
    handler: "appendBlobHandler",
    method: "create"
};
operationHandlerMapping[operation_1.default.AppendBlob_AppendBlock] = {
    arguments: [
        "body",
        "contentLength",
        "options"
    ],
    handler: "appendBlobHandler",
    method: "appendBlock"
};
operationHandlerMapping[operation_1.default.AppendBlob_AppendBlockFromUrl] = {
    arguments: [
        "sourceUrl",
        "contentLength",
        "options"
    ],
    handler: "appendBlobHandler",
    method: "appendBlockFromUrl"
};
operationHandlerMapping[operation_1.default.AppendBlob_Seal] = {
    arguments: [
        "options"
    ],
    handler: "appendBlobHandler",
    method: "seal"
};
operationHandlerMapping[operation_1.default.BlockBlob_Upload] = {
    arguments: [
        "body",
        "contentLength",
        "options"
    ],
    handler: "blockBlobHandler",
    method: "upload"
};
operationHandlerMapping[operation_1.default.BlockBlob_PutBlobFromUrl] = {
    arguments: [
        "contentLength",
        "copySource",
        "options"
    ],
    handler: "blockBlobHandler",
    method: "putBlobFromUrl"
};
operationHandlerMapping[operation_1.default.BlockBlob_StageBlock] = {
    arguments: [
        "blockId",
        "contentLength",
        "body",
        "options"
    ],
    handler: "blockBlobHandler",
    method: "stageBlock"
};
operationHandlerMapping[operation_1.default.BlockBlob_StageBlockFromURL] = {
    arguments: [
        "blockId",
        "contentLength",
        "sourceUrl",
        "options"
    ],
    handler: "blockBlobHandler",
    method: "stageBlockFromURL"
};
operationHandlerMapping[operation_1.default.BlockBlob_CommitBlockList] = {
    arguments: [
        "blocks",
        "options"
    ],
    handler: "blockBlobHandler",
    method: "commitBlockList"
};
operationHandlerMapping[operation_1.default.BlockBlob_GetBlockList] = {
    arguments: [
        "options"
    ],
    handler: "blockBlobHandler",
    method: "getBlockList"
};
function getHandlerByOperation(operation) {
    return operationHandlerMapping[operation];
}
exports.default = getHandlerByOperation;
//# sourceMappingURL=handlerMappers.js.map