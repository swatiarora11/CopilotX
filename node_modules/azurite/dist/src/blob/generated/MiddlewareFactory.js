"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * MiddlewareFactory will generate middleware according to swagger definitions.
 *
 * Generated middleware MUST be used by strict order when you build your HTTP server:
 *  * DispatchMiddleware
 *  * DeserializerMiddleware
 *  * HandlerMiddleware
 *  * SerializerMiddleware
 *  * ErrorMiddleware
 *  * EndMiddleware
 *
 * To compatible with different Node.js server frameworks, such as Express or Koa,
 * Extend this class and implement interfaces IRequest and IResponse as adapters.
 *
 * As above default generated middleware is callback style, you may want to wrap them into promise
 * style for Koa like frameworks. Generated middleware will always trigger callback method at last,
 * and pass all error object as the first parameter of callback method.
 *
 * We already provide implementation for Express framework. Refer to:
 *  * ExpressMiddlewareFactory
 *  * ExpressRequestAdapter
 *  * ExpressResponseAdapter
 *
 * @export
 * @class MiddlewareFactory
 */
class MiddlewareFactory {
    /**
     * Creates an instance of MiddlewareFactory.
     *
     * @param {ILogger} logger A valid logger
     * @memberof MiddlewareFactory
     */
    constructor(logger) {
        this.logger = logger;
    }
}
exports.default = MiddlewareFactory;
//# sourceMappingURL=MiddlewareFactory.js.map