"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = exports.activate = void 0;
const tslib_1 = require("tslib");
const vscode_1 = require("vscode");
const VSCAccessLog_1 = tslib_1.__importDefault(require("./common/VSCAccessLog"));
const VSCNotification_1 = tslib_1.__importDefault(require("./common/VSCNotification"));
const VSCProgress_1 = tslib_1.__importDefault(require("./common/VSCProgress"));
const VSCServerManagerBlob_1 = tslib_1.__importDefault(require("./common/VSCServerManagerBlob"));
const VSCServerManagerQueue_1 = tslib_1.__importDefault(require("./common/VSCServerManagerQueue"));
const VSCServerManagerTable_1 = tslib_1.__importDefault(require("./common/VSCServerManagerTable"));
const VSCStatusBarItem_1 = tslib_1.__importDefault(require("./common/VSCStatusBarItem"));
function activate(context) {
    // Initialize server managers
    const blobServerManager = new VSCServerManagerBlob_1.default();
    const queueServerManager = new VSCServerManagerQueue_1.default();
    const tableServerManager = new VSCServerManagerTable_1.default();
    // Hook up status bar handlers
    const vscBlobStatusBar = new VSCStatusBarItem_1.default(blobServerManager, vscode_1.window.createStatusBarItem(vscode_1.StatusBarAlignment.Right, 1000));
    const vscQueueStatusBar = new VSCStatusBarItem_1.default(queueServerManager, vscode_1.window.createStatusBarItem(vscode_1.StatusBarAlignment.Right, 1001));
    const vscTableStatusBar = new VSCStatusBarItem_1.default(tableServerManager, vscode_1.window.createStatusBarItem(vscode_1.StatusBarAlignment.Right, 1002));
    blobServerManager.addEventListener(vscBlobStatusBar);
    queueServerManager.addEventListener(vscQueueStatusBar);
    tableServerManager.addEventListener(vscTableStatusBar);
    // Hook up notification handlers
    const notification = new VSCNotification_1.default();
    blobServerManager.addEventListener(notification);
    queueServerManager.addEventListener(notification);
    tableServerManager.addEventListener(notification);
    // Hook up progress handlers
    blobServerManager.addEventListener(new VSCProgress_1.default());
    queueServerManager.addEventListener(new VSCProgress_1.default());
    tableServerManager.addEventListener(new VSCProgress_1.default());
    // Hook up access log handlers
    blobServerManager.addEventListener(new VSCAccessLog_1.default(blobServerManager.accessChannelStream));
    queueServerManager.addEventListener(new VSCAccessLog_1.default(queueServerManager.accessChannelStream));
    tableServerManager.addEventListener(new VSCAccessLog_1.default(tableServerManager.accessChannelStream));
    context.subscriptions.push(vscode_1.commands.registerCommand("azurite.start", () => {
        blobServerManager.start();
        queueServerManager.start();
        tableServerManager.start();
    }), vscode_1.commands.registerCommand("azurite.close", () => {
        blobServerManager.close();
        queueServerManager.close();
        tableServerManager.close();
    }), vscode_1.commands.registerCommand("azurite.clean", () => {
        blobServerManager.clean();
        queueServerManager.clean();
        tableServerManager.clean();
    }), vscode_1.commands.registerCommand(blobServerManager.getStartCommand(), async () => {
        await blobServerManager.start();
    }), vscode_1.commands.registerCommand(blobServerManager.getCloseCommand(), () => {
        blobServerManager.close();
    }), vscode_1.commands.registerCommand(blobServerManager.getCleanCommand(), () => {
        blobServerManager.clean();
    }), vscode_1.commands.registerCommand(queueServerManager.getStartCommand(), async () => {
        await queueServerManager.start();
    }), vscode_1.commands.registerCommand(queueServerManager.getCloseCommand(), () => {
        queueServerManager.close();
    }), vscode_1.commands.registerCommand(queueServerManager.getCleanCommand(), () => {
        queueServerManager.clean();
    }), vscode_1.commands.registerCommand(tableServerManager.getStartCommand(), async () => {
        await tableServerManager.start();
    }), vscode_1.commands.registerCommand(tableServerManager.getCloseCommand(), () => {
        tableServerManager.close();
    }), vscode_1.commands.registerCommand(tableServerManager.getCleanCommand(), () => {
        tableServerManager.clean();
    }), vscBlobStatusBar.statusBarItem, vscQueueStatusBar.statusBarItem, vscTableStatusBar.statusBarItem);
}
exports.activate = activate;
// this method is called when your extension is deactivated
function deactivate() {
    /* NOOP */
}
exports.deactivate = deactivate;
//# sourceMappingURL=extension.js.map