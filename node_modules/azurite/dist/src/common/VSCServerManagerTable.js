"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const TableConfiguration_1 = tslib_1.__importDefault(require("../table/TableConfiguration"));
const TableServer_1 = tslib_1.__importDefault(require("../table/TableServer"));
const constants_1 = require("../table/utils/constants");
const Logger = tslib_1.__importStar(require("./Logger"));
const NoLoggerStrategy_1 = tslib_1.__importDefault(require("./NoLoggerStrategy"));
const VSCChannelLoggerStrategy_1 = tslib_1.__importDefault(require("./VSCChannelLoggerStrategy"));
const VSCChannelWriteStream_1 = tslib_1.__importDefault(require("./VSCChannelWriteStream"));
const VSCEnvironment_1 = tslib_1.__importDefault(require("./VSCEnvironment"));
const VSCServerManagerBase_1 = tslib_1.__importDefault(require("./VSCServerManagerBase"));
const VSCServerManagerClosedState_1 = tslib_1.__importDefault(require("./VSCServerManagerClosedState"));
class VSCServerManagerTable extends VSCServerManagerBase_1.default {
    constructor() {
        super("Azurite Table Service", new VSCServerManagerClosedState_1.default());
        this.accessChannelStream = new VSCChannelWriteStream_1.default("Azurite Table");
        this.debuggerLoggerStrategy = new VSCChannelLoggerStrategy_1.default("Azurite Table Debug");
    }
    getStartCommand() {
        return "azurite.start_table";
    }
    getCloseCommand() {
        return "azurite.close_table";
    }
    getCleanCommand() {
        return "azurite.clean_table";
    }
    async createImpl() {
        const config = await this.getConfiguration();
        Logger.default.strategy = config.enableDebugLog
            ? this.debuggerLoggerStrategy
            : new NoLoggerStrategy_1.default();
        this.server = new TableServer_1.default(config);
    }
    async startImpl() {
        await this.server.start();
    }
    async closeImpl() {
        this.server.close();
    }
    async cleanImpl() {
        await this.createImpl();
        await this.server.clean();
    }
    async getConfiguration() {
        const env = new VSCEnvironment_1.default();
        const location = await env.location();
        // Initialize server configuration
        const config = new TableConfiguration_1.default(env.tableHost(), env.tablePort(), (0, path_1.join)(location, constants_1.DEFAULT_TABLE_LOKI_DB_PATH), (await env.debug()) === true, !env.silent(), this.accessChannelStream, undefined, env.loose(), env.skipApiVersionCheck(), env.cert(), env.key(), env.pwd(), env.oauth(), env.disableProductStyleUrl(), env.inMemoryPersistence());
        return config;
    }
}
exports.default = VSCServerManagerTable;
//# sourceMappingURL=VSCServerManagerTable.js.map